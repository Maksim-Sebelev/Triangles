module;

//----------------------------------------------------------------------------------------------------------------------------

#include <cassert>

#include <cmath>

#include "global.hpp"

//----------------------------------------------------------------------------------------------------------------------------

export module matrix;

//----------------------------------------------------------------------------------------------------------------------------

export import vector;

//----------------------------------------------------------------------------------------------------------------------------

export namespace Math
{

//----------------------------------------------------------------------------------------------------------------------------

namespace LinearAlgebra
{

//----------------------------------------------------------------------------------------------------------------------------

template <typename number_t>
class matrix_2x2_t
{
    using vector_2_t = vector_2_t<number_t>;

    private:
        number_t a11_;
        number_t a12_;
        number_t a21_;
        number_t a22_;

    public:
        matrix_2x2_t(const number_t& a11, const number_t& a12, const number_t& a21, const number_t& a22);
        matrix_2x2_t(const vector_2_t& column_1, const vector_2_t& column_2);

        vector_2_t get_column_1() const;
        vector_2_t get_column_2() const;

        number_t get_determinate() const;

        void set_a11(const number_t& value);
        void set_a12(const number_t& value);
        void set_a21(const number_t& value);
        void set_a22(const number_t& value);
};

//----------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------

template <typename number_t>
matrix_2x2_t<number_t>::matrix_2x2_t(const number_t& a11, const number_t& a12, const number_t& a21, const number_t& a22) :
a11_(a11),
a12_(a12),
a21_(a21),
a22_(a22)
{}

//----------------------------------------------------------------------------------------------------------------------------

template <typename number_t>
matrix_2x2_t<number_t>::matrix_2x2_t(const vector_2_t& column_1, const vector_2_t& column_2) :
a11_(column_1.get_a1()),
a12_(column_2.get_a1()),
a21_(column_1.get_a2()),
a22_(column_2.get_a2())
{}

//----------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------

template <typename number_t>
vector_2_t<number_t>
matrix_2x2_t<number_t>::get_column_1() const
{
    return vector_2_t(a11_, a21_);
}

//----------------------------------------------------------------------------------------------------------------------------

template <typename number_t>
vector_2_t<number_t>
matrix_2x2_t<number_t>::get_column_2() const
{
    return vector_2_t(a12_, a22_);
}

//----------------------------------------------------------------------------------------------------------------------------

template <typename number_t>
number_t
matrix_2x2_t<number_t>::get_determinate() const
{
    return
        (a11_ * a22_) - 
        (a12_ * a21_);
}
//----------------------------------------------------------------------------------------------------------------------------

template <typename number_t>
void
matrix_2x2_t<number_t>::set_a11(const number_t& value)
{
    a11_ = value;
}

//----------------------------------------------------------------------------------------------------------------------------

template <typename number_t>
void
matrix_2x2_t<number_t>::set_a12(const number_t& value)
{
    a12_ = value;
}

//----------------------------------------------------------------------------------------------------------------------------

template <typename number_t>
void
matrix_2x2_t<number_t>::set_a21(const number_t& value)
{
    a21_ = value;
}

//----------------------------------------------------------------------------------------------------------------------------

template <typename number_t>
void
matrix_2x2_t<number_t>::set_a22(const number_t& value)
{
    a22_ = value;
}

//----------------------------------------------------------------------------------------------------------------------------

} /* namespace LinearAglebra */
} /* namespace Math */

//----------------------------------------------------------------------------------------------------------------------------
